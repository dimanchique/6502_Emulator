#pragma once

#include "core/types.h"

enum I8086_OpCodes : BYTE {

    ADD_Eb_Gb = 0x00,
    ADD_Ev_Gv = 0x01,
    ADD_Gb_Eb = 0x02,
    ADD_Gv_Ev = 0x03,
    ADD_AL_Ib = 0x04,
    ADD_AX_Iv = 0x05,
    PUSH_ES = 0x06,
    POP_ES = 0x07,
    OR_Eb_Gb = 0x08,
    OR_Ev_Gv = 0x09,
    OR_Gb_Eb = 0x0A,
    OR_Gv_Ev = 0x0B,
    OR_AL_Ib = 0x0C,
    OR_AX_Iv = 0x0D,
    PUSH_CS = 0x0E,
    ADC_Eb_Gb = 0x10,
    ADC_Ev_Gv = 0x11,
    ADC_Gb_Eb = 0x12,
    ADC_Gv_Ev = 0x13,
    ADC_AL_Ib = 0x14,
    ADC_AX_Iv = 0x15,
    PUSH_SS = 0x16,
    POP_SS = 0x17,
    SBB_Eb_Gb = 0x18,
    SBB_Ev_Gv = 0x19,
    SBB_Gb_Eb = 0x1A,
    SBB_Gv_Ev = 0x1B,
    SBB_AL_Ib = 0x1C,
    SBB_AX_Iv = 0x1D,
    PUSH_DS = 0x1E,
    POP_DS = 0x1F,
    AND_Eb_Gb = 0x20,
    AND_Ev_Gv = 0x21,
    AND_Gb_Eb = 0x22,
    AND_Gv_Ev = 0x23,
    AND_AL_Ib = 0x24,
    AND_AX_Iv = 0x25,
    ES = 0x26,
    DAA = 0x27,
    SUB_Eb_Gb = 0x28,
    SUB_Ev_Gv = 0x29,
    SUB_Gb_Eb = 0x2A,
    SUB_Gv_Ev = 0x2B,
    SUB_AL_Ib = 0x2C,
    SUB_AX_Iv = 0x2D,
    CS = 0x2E,
    DAS = 0x2F,
    XOR_Eb_Gb = 0x30,
    XOR_Ev_Gv = 0x31,
    XOR_Gb_Eb = 0x32,
    XOR_Gv_Ev = 0x33,
    XOR_AL_Ib = 0x34,
    XOR_AX_Iv = 0x35,
    SS = 0x36,
    AAA = 0x37,
    CMP_Eb_Gb = 0x38,
    CMP_Ev_Gv = 0x39,
    CMP_Gb_Eb = 0x3A,
    CMP_Gv_Ev = 0x3B,
    CMP_AL_Ib = 0x3C,
    CMP_AX_Iv = 0x3D,
    DS = 0x3E,
    AAS = 0x3F,
    INC_AX = 0x40,
    INC_CX = 0x41,
    INC_DX = 0x42,
    INC_BX = 0x43,
    INC_SP = 0x44,
    INC_BP = 0x45,
    INC_SI = 0x46,
    INC_DI = 0x47,
    DEC_AX = 0x48,
    DEC_CX = 0x49,
    DEC_DX = 0x4A,
    DEC_BX = 0x4B,
    DEC_SP = 0x4C,
    DEC_BP = 0x4D,
    DEC_SI = 0x4E,
    DEC_DI = 0x4F,
    PUSH_AX = 0x50,
    PUSH_CX = 0x51,
    PUSH_DX = 0x52,
    PUSH_BX = 0x53,
    PUSH_SP = 0x54,
    PUSH_BP = 0x55,
    PUSH_SI = 0x56,
    PUSH_DI = 0x57,
    POP_AX = 0x58,
    POP_CX = 0x59,
    POP_DX = 0x5A,
    POP_BX = 0x5B,
    POP_SP = 0x5C,
    POP_BP = 0x5D,
    POP_SI = 0x5E,
    POP_DI = 0x5F,
    JO_Jb = 0x70,
    JNO_Jb = 0x71,
    JB_Jb = 0x72,
    JNB_Jb = 0x73,
    JZ_Jb = 0x74,
    JNZ_Jb = 0x75,
    JBE_Jb = 0x76,
    JA_Jb = 0x77,
    JS_Jb = 0x78,
    JNS_Jb = 0x79,
    JPE_Jb = 0x7A,
    JPO_Jb = 0x7B,
    JL_Jb = 0x7C,
    JGE_Jb = 0x7D,
    JLE_Jb = 0x7E,
    JG_Jb = 0x7F,
    GRP1_Eb_Ib = 0x80,
    GRP1_Ev_Iv = 0x81,
    // GRP1_Eb_Ib = 0x82, //duplicated 0x80 but is it necessary?
    GRP1_Ev_Ib = 0x83,
    TEST_Gb_Eb = 0x84,
    TEST_Gv_Ev = 0x85,
    XCHG_Gb_Eb = 0x86,
    XCHG_Gv_Ev = 0x87,
    MOV_Eb_Gb = 0x88,
    MOV_Ev_Gv = 0x89,
    MOV_Gb_Eb = 0x8A,
    MOV_Gv_Ev = 0x8B,
    MOV_Ew_Sw = 0x8C,
    LEA_Gv_M = 0x8D,
    MOV_Sw_Ew = 0x8E,
    POP_Ev = 0x8F,
    NOP = 0x90,
    XCHG_CX_AX = 0x91,
    XCHG_DX_AX = 0x92,
    XCHG_BX_AX = 0x93,
    XCHG_SP_AX = 0x94,
    XCHG_BP_AX = 0x95,
    XCHG_SI_AX = 0x96,
    XCHG_DI_AX = 0x97,
    CBW = 0x98,
    CWD = 0x99,
    CALL_Ap = 0x9A,
    WAIT = 0x9B,
    PUSHF = 0x9C,
    POPF = 0x9D,
    SAHF = 0x9E,
    LAHF = 0x9F,
    MOV_AL_Ob = 0xA0,
    MOV_AX_Ov = 0xA1,
    MOV_Ob_AL = 0xA2,
    MOV_Ov_AX = 0xA3,
    MOVSB = 0xA4,
    MOVSW = 0xA5,
    CMPSB = 0xA6,
    CMPSW = 0xA7,
    TEST_AL_Ib = 0xA8,
    TEST_AX_Iv = 0xA9,
    STOSB = 0xAA,
    STOSW = 0xAB,
    LODSB = 0xAC,
    LODSW = 0xAD,
    SCASB = 0xAE,
    SCASW = 0xAF,
    MOV_AL_Ib = 0xB0,
    MOV_CL_Ib = 0xB1,
    MOV_DL_Ib = 0xB2,
    MOV_BL_Ib = 0xB3,
    MOV_AH_Ib = 0xB4,
    MOV_CH_Ib = 0xB5,
    MOV_DH_Ib = 0xB6,
    MOV_BH_Ib = 0xB7,
    MOV_AX_Iv = 0xB8,
    MOV_CX_Iv = 0xB9,
    MOV_DX_Iv = 0xBA,
    MOV_BX_Iv = 0xBB,
    MOV_SP_Iv = 0xBC,
    MOV_BP_Iv = 0xBD,
    MOV_SI_Iv = 0xBE,
    MOV_DI_Iv = 0xBF,
    RET_Iw = 0xC2,
    RET = 0xC3,
    LES_Gv_Mp = 0xC4,
    LDS_Gv_Mp = 0xC5,
    MOV_Eb_Ib = 0xC6,
    MOV_Ev_Iv = 0xC7,
    RETF_Iw = 0xCA,
    RETF = 0xCB,
    INT_3 = 0xCC,
    INT_Ib = 0xCD,
    INTO = 0xCE,
    IRET = 0xCF,
    GRP2_Eb_1 = 0xD0,
    GRP2_Ev_1 = 0xD1,
    GRP2_Eb_CL = 0xD2,
    GRP2_Ev_CL = 0xD3,
    AAM_I0 = 0xD4,
    AAD_I0 = 0xD5,
    XLAT = 0xD7,
    LOOPNZ_Jb = 0xE0,
    LOOPZ_Jb = 0xE1,
    LOOP_Jb = 0xE2,
    JCXZ_Jb = 0xE3,
    IN_AL_Ib = 0xE4,
    IN_AX_Ib = 0xE5,
    OUT_Ib_AL = 0xE6,
    OUT_Ib_AX = 0xE7,
    CALL_Jv = 0xE8,
    JMP_Jv = 0xE9,
    JMP_Ap = 0xEA,
    JMP_Jb = 0xEB,
    IN_AL_DX = 0xEC,
    IN_AX_DX = 0xED,
    OUT_DX_AL = 0xEE,
    OUT_DX_AX = 0xEF,
    LOCK = 0xF0,
    REPNZ = 0xF2,
    REPZ = 0xF3,
    HLT = 0xF4,
    CMC = 0xF5,
    GRP3a_Eb = 0xF6,
    GRP3b_Ev = 0xF7,
    CLC = 0xF8,
    STC = 0xF9,
    CLI = 0xFA,
    STI = 0xFB,
    CLD = 0xFC,
    STD = 0xFD,
    GRP4_Eb = 0xFE,
    GRP5_Ev = 0xFF
};

enum I8086_OpCods_GRP1 : BYTE {
    GRP1_ADD = 0x00,
    GRP1_OR = 0x01,
    GRP1_ADC = 0x02,
    GRP1_SBB = 0x03,
    GRP1_AND = 0x04,
    GRP1_SUB = 0x05,
    GRP1_XOR = 0x06,
    GRP1_CMP = 0x07
};

enum I8086_OpCods_GRP2 : BYTE {
    GRP2_ROL = 0x00,
    GRP2_ROR = 0x01,
    GRP2_RCL = 0x02,
    GRP2_RCR = 0x03,
    GRP2_SHL = 0x04,
    GRP2_SHR = 0x05,
    GRP2_SAR = 0x07
};

enum I8086_OpCods_GRP3a : BYTE {
    GRP3a_TEST_Eb_Ib = 0x00,
    GRP3a_NOT        = 0x02,
    GRP3a_NEG        = 0x03,
    GRP3a_MUL        = 0x04,
    GRP3a_IMUL       = 0x05,
    GRP3a_DIV        = 0x06,
    GRP3a_IDIV       = 0x07
};

enum I8086_OpCods_GRP3b : BYTE {
    GRP3b_TEST_Ev_Iv = 0x00,
    GRP3b_NOT        = 0x02,
    GRP3b_NEG        = 0x03,
    GRP3b_MUL        = 0x04,
    GRP3b_IMUL       = 0x05,
    GRP3b_DIV        = 0x06,
    GRP3b_IDIV       = 0x07
};

enum I8086_OpCods_GRP4 : BYTE {
    GRP4_INC = 0x00,
    GRP4_DEC = 0x01
};

enum I8086_OpCods_GRP5 : BYTE {
    GRP5_INC     = 0x00,
    GRP5_DEC     = 0x01,
    GRP5_CALL    = 0x02,
    GRP5_CALL_Mp = 0x03,
    GRP5_JMP     = 0x04,
    GRP5_JMP_Mp  = 0x05,
    GRP5_PUSH    = 0x06
};
